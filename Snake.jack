// Snake Game - The snake moves automatically
class Snake {
    field Array body;        // Array to store snake segments
    field int length;        // Current length of snake
    field int direction;     // 0=right, 1=up, 2=left, 3=down
    field int headX, headY;  // Head position
    field int foodX, foodY;  // Food position
    field int score;
    field boolean gameOver;
    field int maxLength;

    constructor Snake new() {
        let body = Array.new(200);  // Max possible length
        let length = 3;
        let direction = 0;  // Start moving right
        let headX = 10;
        let headY = 10;
        let score = 0;
        let gameOver = false;
        let maxLength = 200;
        
        // Initialize snake body
        let body[0] = headX * 32 + headY;  // Head
        let body[1] = (headX-1) * 32 + headY;  // Body segment 1
        let body[2] = (headX-2) * 32 + headY;  // Body segment 2
        
        do generateFood();
        do drawInitialSnake();
        return this;
    }

    method void dispose() {
        do body.dispose();
        do Memory.deAlloc(this);
        return;
    }

    method void drawInitialSnake() {
        var int i;
        var int x, y;
        
        let i = 0;
        while (i < length) {
            let x = body[i] / 32;
            let y = body[i] - (x * 32);
            do drawSegment(x * 16, y * 16, true);
            let i = i + 1;
        }
        return;
    }

    method void drawSegment(int x, int y, boolean draw) {
        do Screen.setColor(draw);
        do Screen.drawRectangle(x, y, x + 15, y + 15);
        return;
    }    method void generateFood() {
        var int random1, random2;
        var int attempts;
        var boolean validPosition;
        
        let attempts = 0;
        let validPosition = false;
        
        // Try multiple times to find a valid position
        while ((~validPosition) & (attempts < 50)) {
            // Improved pseudo-random number generation
            let random1 = (headX + headY + score + attempts * 7) & 31;
            let random2 = (headX * headY + score + attempts * 11 + 17) & 15;
            
            let foodX = random1;
            let foodY = random2;
            
            // Check if position is valid (not on snake)
            if (~checkCollisionWithBody(foodX, foodY)) {
                let validPosition = true;
            } else {
                let attempts = attempts + 1;
            }
        }
        
        // If we couldn't find a valid position after 50 attempts,
        // use a systematic approach to find an empty spot
        if (~validPosition) {
            do findEmptySpot();
        }
        
        do drawFood();
        return;
    }
    
    method void findEmptySpot() {
        var int x, y;
        var boolean found;
        
        let found = false;
        let x = 0;
        let y = 0;
        
        // Systematically search for empty spot
        while ((~found) & (x < 32)) {
            let y = 0;
            while ((~found) & (y < 16)) {
                if (~checkCollisionWithBody(x, y)) {
                    let foodX = x;
                    let foodY = y;
                    let found = true;
                } else {
                    let y = y + 1;
                }
            }
            if (~found) {
                let x = x + 1;
            }
        }
        return;
    }

    method void drawFood() {
        do Screen.setColor(true);
        do Screen.drawCircle(foodX * 16 + 8, foodY * 16 + 8, 6);
        return;
    }    // HELPER METHODS FOR IMPROVED BOT AI
    method int getDirection() {
        return direction;
    }
    
    // Make checkCollisionWithBody accessible to bot logic
    method boolean checkCollisionWithBody(int x, int y) {
        var int i;
        var int segX, segY;
        
        let i = 0;
        while (i < length) {
            let segX = body[i] / 32;
            let segY = body[i] - (segX * 32);
            if ((segX = x) & (segY = y)) {
                return true;
            }
            let i = i + 1;
        }
        return false;
    }
    
    method void move() {
        var int newHeadX, newHeadY;
        var int tailX, tailY;
        var int i;
        
        if (gameOver) {
            return;
        }
        
        // Calculate new head position
        let newHeadX = headX;
        let newHeadY = headY;
        
        if (direction = 0) { let newHeadX = headX + 1; }  // Right
        if (direction = 1) { let newHeadY = headY - 1; }  // Up
        if (direction = 2) { let newHeadX = headX - 1; }  // Left
        if (direction = 3) { let newHeadY = headY + 1; }  // Down
        
        // Check wall collision
        if ((newHeadX < 0) | (newHeadX > 31) | (newHeadY < 0) | (newHeadY > 15)) {
            let gameOver = true;
            return;
        }
        
        // Check self collision
        if (checkCollisionWithBody(newHeadX, newHeadY)) {
            let gameOver = true;
            return;
        }
        
        // Check food collision
        if ((newHeadX = foodX) & (newHeadY = foodY)) {
            let score = score + 10;
            let length = length + 1;
            do generateFood();
        } else {
            // Remove tail if not eating food
            let tailX = body[length-1] / 32;
            let tailY = body[length-1] - (tailX * 32);
            do drawSegment(tailX * 16, tailY * 16, false);
        }
        
        // Move body segments
        let i = length - 1;
        while (i > 0) {
            let body[i] = body[i-1];
            let i = i - 1;
        }
        
        // Update head
        let headX = newHeadX;
        let headY = newHeadY;
        let body[0] = headX * 32 + headY;
        
        // Draw new head
        do drawSegment(headX * 16, headY * 16, true);
        
        return;
    }

    method void changeDirection(int newDir) {
        // Prevent reversing into itself
        if (~((direction = 0) & (newDir = 2))) {  // Can't go left when going right
            if (~((direction = 1) & (newDir = 3))) {  // Can't go down when going up
                if (~((direction = 2) & (newDir = 0))) {  // Can't go right when going left
                    if (~((direction = 3) & (newDir = 1))) {  // Can't go up when going down
                        let direction = newDir;
                    }
                }
            }
        }
        return;
    }

    method int getScore() {
        return score;
    }

    method boolean isGameOver() {
        return gameOver;
    }    method void displayScore() {
        do Output.moveCursor(0, 0);
        do Output.printString("Score: ");
        do Output.printInt(score);
        do Output.printString("  Length: ");
        do Output.printInt(length);
        return;
    }

    method int getHeadX() {
        return headX;
    }

    method int getHeadY() {
        return headY;
    }

    method int getFoodX() {
        return foodX;
    }

    method int getFoodY() {
        return foodY;
    }

    method int getTailX() {
        var int tailSegment;
        if (length > 0) {
            let tailSegment = body[length - 1];
            return tailSegment / 32;
        }
        return headX;
    }
    
    method int getTailY() {
        var int tailSegment;
        if (length > 0) {
            let tailSegment = body[length - 1];
            return tailSegment - ((tailSegment / 32) * 32);
        }
        return headY;
    }

    method boolean isDirectionSafe(int dir) {
        var int newX, newY;
        
        let newX = headX;
        let newY = headY;
        
        if (dir = 0) { let newX = headX + 1; }  // Right
        if (dir = 1) { let newY = headY - 1; }  // Up
        if (dir = 2) { let newX = headX - 1; }  // Left
        if (dir = 3) { let newY = headY + 1; }  // Down
        
        // Check wall collision
        if ((newX < 0) | (newX > 31) | (newY < 0) | (newY > 15)) {
            return false;
        }
        
        // Check self collision
        if (checkCollisionWithBody(newX, newY)) {
            return false;
        }
        
        return true;
    }
    
    method int getLength() {
        return length;
    }
}
